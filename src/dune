(rule (targets int63_backend.ml)
 (deps (:first_dep select-int63-backend/select.ml))
 (action
  (run %{ocaml} %{first_dep} -portable-int63
   !%{lib-available:base-native-int63} -arch-sixtyfour %{arch_sixtyfour} -o
   %{targets})))

(rule (targets bytes_set_primitives.ml)
 (deps (:first_dep select-bytes-set-primitives/select.ml))
 (action
  (run %{ocaml} %{first_dep} -ocaml-version %{ocaml_version} -o %{targets})))

(rule (targets pow_overflow_bounds.ml)
 (deps (:first_dep ../generate/generate_pow_overflow_bounds.exe))
 (action (run %{first_dep} -atomic -o %{targets})) (mode fallback))

(library (name base) (public_name base)
 (libraries base_internalhash_types caml sexplib0 shadow_stdlib)
 (c_flags :standard -D_LARGEFILE64_SOURCE (:include mpopcnt.sexp))
 (c_names exn_stubs int_math_stubs hash_stubs am_testing)
 (flags :standard -w -66)
 (preprocess no_preprocessing)
  (lint
  (pps ppx_base ppx_base_lint -check-doc-comments -type-conv-keep-w32=impl
   -apply=js_style,base_lint,type_conv))
 (js_of_ocaml (javascript_files runtime.js)))

(rule (targets mpopcnt.sexp) (deps)
 (action
  (progn
   (with-stdout-to popcnt_test.c
    (echo
     "int main(int argc, char ** argv) { return __builtin_popcount(argc); }"))
   (system
    "%{cc} -mpopcnt -c popcnt_test.c 2> ${null} && echo '(-mpopcnt)' > %{targets} || echo '()' > %{targets}"))))

(ocamllex hex_lexer)