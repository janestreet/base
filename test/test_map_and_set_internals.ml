(* In this file we test the binary tree balance invariants used in Set and Map. We rely on
   the fact that they use the same internal structure and invariants, modulo details
   unrelated to tree balance. *)

open! Base
open Expect_test_helpers_base

let print_s sexp =
  Dynamic.with_temporarily sexp_style Sexp_style.simple_pretty ~f:(fun () -> print_s sexp)
;;

module type S = sig
  type t

  (** Recursively check balance invariantss for [t]. *)
  val balance_invariants : t -> bool

  (** Trees are balanced enough to be arguments to [create_if_balanced]. *)
  val are_balanced : t -> t -> bool

  (** Trees are balanced enough to be arguments to [create_if_almost_balanced]. *)
  val are_almost_balanced : t -> t -> bool

  (** Extracting the structure of trees. *)
  val expose : t -> (t * t) option

  (** The empty tree. *)
  val empty : t

  (** Creates a tree without performing any rotations. *)
  val create_if_balanced : t -> t -> t

  (** Creates a tree, performing O(1) rotations. *)
  val create_if_almost_balanced : t -> t -> t

  (** Creates a tree, performing O(log n) rotations. *)
  val create_even_if_completely_unbalanced : t -> t -> t
end

(* We write one set of expect tests that should behave the same on both sets and maps. *)
let test (module Tree : S) =
  let module _ : S = struct
    type t = Tree.t

    (* Predicates, used in tests below. *)

    let balance_invariants = Tree.balance_invariants
    let are_balanced = Tree.are_balanced
    let are_almost_balanced = Tree.are_almost_balanced

    (* Accessor, used in [length] and [sexp_of_t]. *)

    let expose = Tree.expose

    open struct
      (* Using single-character shorthand tags so that sexps stay on a single line. *)
      let rec sexp_of_t t =
        match expose t with
        | None -> Sexp.Atom "."
        | Some (l, r) -> Sexp.List [ sexp_of_t l; sexp_of_t r ]
      ;;
    end

    (* Constructors, test them. *)

    let empty = Tree.empty

    let%expect_test _ =
      require (balance_invariants empty);
      require (are_balanced empty empty);
      require (are_almost_balanced empty empty)
    ;;

    open struct
      (* An enumeration of trees for testing. *)
      module Trees : sig
        type t

        val create : max_size:int -> t
        val iter : t -> size:int -> f:(Tree.t -> unit) -> unit
      end = struct
        (* Indexed by size of tree. *)
        type 'a by_size = { by_size : 'a Queue.t } [@@unboxed]

        (* Enumerates all the ways of balancing for a given size/start. *)
        type 'a by_balance = { by_balance : 'a Queue.t } [@@unboxed]

        let get_size { by_size } ~size = Queue.get by_size size
        let iter_by_balance { by_balance } ~f = Queue.iter by_balance ~f

        type t = Tree.t by_balance by_size

        let empty_by_balance = { by_balance = Queue.singleton empty }

        let create_size (t : t) ~size =
          if size = 0
          then empty_by_balance
          else (
            let q = Queue.create () in
            let sum = size - 1 in
            for lsize = 0 to sum do
              let rsize = sum - lsize in
              let ls = get_size t ~size:lsize in
              let rs = get_size t ~size:rsize in
              iter_by_balance ls ~f:(fun l ->
                iter_by_balance rs ~f:(fun r ->
                  if Tree.are_balanced l r
                  then Queue.enqueue q (Tree.create_if_balanced l r)))
            done;
            { by_balance = q })
        ;;

        let create ~max_size : t =
          let t = { by_size = Queue.create () } in
          for size = 0 to max_size do
            Queue.enqueue t.by_size (create_size t ~size)
          done;
          t
        ;;

        let iter by_size ~size ~f =
          let by_balance = get_size by_size ~size in
          iter_by_balance by_balance ~f
        ;;
      end

      (* Testing up to size 24 takes ~5 seconds, at least on the box where this was
         originally tested in 2024-05. Testing more takes ~15 seconds. *)
      let max_total_size_to_test = 24

      (* Reduce output by skipping cases where either side is an empty tree. *)
      let min_size_to_show = 1

      (* The smallest size where we see completely-unbalanced pairs and neither side is
         empty is 6 (5 on one side, 1 on the other). We show a few sizes beyond that. *)
      let max_total_size_to_show = 9

      (* Cache of pre-computed trees. *)
      let trees = Trees.create ~max_size:max_total_size_to_test

      (* Call [f] on all pairs of trees up to the given total maximum size. *)
      let for_all_pairs ~max_total_size f =
        for total_size = 0 to max_total_size do
          for lsize = 0 to total_size do
            let rsize = total_size - lsize in
            Trees.iter trees ~size:lsize ~f:(fun l ->
              Trees.iter trees ~size:rsize ~f:(fun r -> f l ~lsize r ~rsize) [@nontail])
            [@nontail]
          done
        done
      ;;

      (* Test constructing all triples that are "balanced enough" for [create]. *)
      let test_all create ~are_balanced_enough ~have_been_shown =
        let total = ref 0 in
        let shown = ref 0 in
        for_all_pairs ~max_total_size:max_total_size_to_test (fun l ~lsize r ~rsize ->
          if are_balanced_enough l r
          then (
            total := !total + 1;
            let t = create l r in
            if not (balance_invariants t)
            then raise_s [%message "invariants failed" ~_:(t : t)];
            let should_show =
              lsize + rsize <= max_total_size_to_show
              && lsize >= min_size_to_show
              && rsize >= min_size_to_show
              && not (have_been_shown l r)
            in
            if should_show
            then (
              print_s [%sexp ((lsize : int), (rsize : int)), (l : t), (r : t)];
              shown := !shown + 1)));
        print_s [%sexp { shown = (!shown : int); total = (!total : int) }]
      ;;
    end

    let create_if_balanced = Tree.create_if_balanced

    let%expect_test _ =
      test_all
        create_if_balanced
        ~are_balanced_enough:are_balanced
        ~have_been_shown:(fun _ _ -> false);
      [%expect
        {|
        ((1 1) (. .) (. .))
        ((1 2) (. .) (. (. .)))
        ((1 2) (. .) ((. .) .))
        ((2 1) (. (. .)) (. .))
        ((2 1) ((. .) .) (. .))
        ((1 3) (. .) ((. .) (. .)))
        ((2 2) (. (. .)) (. (. .)))
        ((2 2) (. (. .)) ((. .) .))
        ((2 2) ((. .) .) (. (. .)))
        ((2 2) ((. .) .) ((. .) .))
        ((3 1) ((. .) (. .)) (. .))
        ((1 4) (. .) ((. .) (. (. .))))
        ((1 4) (. .) ((. .) ((. .) .)))
        ((1 4) (. .) ((. (. .)) (. .)))
        ((1 4) (. .) (((. .) .) (. .)))
        ((2 3) (. (. .)) ((. .) (. .)))
        ((2 3) ((. .) .) ((. .) (. .)))
        ((3 2) ((. .) (. .)) (. (. .)))
        ((3 2) ((. .) (. .)) ((. .) .))
        ((4 1) ((. .) (. (. .))) (. .))
        ((4 1) ((. .) ((. .) .)) (. .))
        ((4 1) ((. (. .)) (. .)) (. .))
        ((4 1) (((. .) .) (. .)) (. .))
        ((2 4) (. (. .)) ((. .) (. (. .))))
        ((2 4) (. (. .)) ((. .) ((. .) .)))
        ((2 4) (. (. .)) ((. (. .)) (. .)))
        ((2 4) (. (. .)) (((. .) .) (. .)))
        ((2 4) ((. .) .) ((. .) (. (. .))))
        ((2 4) ((. .) .) ((. .) ((. .) .)))
        ((2 4) ((. .) .) ((. (. .)) (. .)))
        ((2 4) ((. .) .) (((. .) .) (. .)))
        ((3 3) ((. .) (. .)) ((. .) (. .)))
        ((4 2) ((. .) (. (. .))) (. (. .)))
        ((4 2) ((. .) (. (. .))) ((. .) .))
        ((4 2) ((. .) ((. .) .)) (. (. .)))
        ((4 2) ((. .) ((. .) .)) ((. .) .))
        ((4 2) ((. (. .)) (. .)) (. (. .)))
        ((4 2) ((. (. .)) (. .)) ((. .) .))
        ((4 2) (((. .) .) (. .)) (. (. .)))
        ((4 2) (((. .) .) (. .)) ((. .) .))
        ((2 5) (. (. .)) ((. .) ((. .) (. .))))
        ((2 5) (. (. .)) ((. (. .)) (. (. .))))
        ((2 5) (. (. .)) ((. (. .)) ((. .) .)))
        ((2 5) (. (. .)) (((. .) .) (. (. .))))
        ((2 5) (. (. .)) (((. .) .) ((. .) .)))
        ((2 5) (. (. .)) (((. .) (. .)) (. .)))
        ((2 5) ((. .) .) ((. .) ((. .) (. .))))
        ((2 5) ((. .) .) ((. (. .)) (. (. .))))
        ((2 5) ((. .) .) ((. (. .)) ((. .) .)))
        ((2 5) ((. .) .) (((. .) .) (. (. .))))
        ((2 5) ((. .) .) (((. .) .) ((. .) .)))
        ((2 5) ((. .) .) (((. .) (. .)) (. .)))
        ((3 4) ((. .) (. .)) ((. .) (. (. .))))
        ((3 4) ((. .) (. .)) ((. .) ((. .) .)))
        ((3 4) ((. .) (. .)) ((. (. .)) (. .)))
        ((3 4) ((. .) (. .)) (((. .) .) (. .)))
        ((4 3) ((. .) (. (. .))) ((. .) (. .)))
        ((4 3) ((. .) ((. .) .)) ((. .) (. .)))
        ((4 3) ((. (. .)) (. .)) ((. .) (. .)))
        ((4 3) (((. .) .) (. .)) ((. .) (. .)))
        ((5 2) ((. .) ((. .) (. .))) (. (. .)))
        ((5 2) ((. .) ((. .) (. .))) ((. .) .))
        ((5 2) ((. (. .)) (. (. .))) (. (. .)))
        ((5 2) ((. (. .)) (. (. .))) ((. .) .))
        ((5 2) ((. (. .)) ((. .) .)) (. (. .)))
        ((5 2) ((. (. .)) ((. .) .)) ((. .) .))
        ((5 2) (((. .) .) (. (. .))) (. (. .)))
        ((5 2) (((. .) .) (. (. .))) ((. .) .))
        ((5 2) (((. .) .) ((. .) .)) (. (. .)))
        ((5 2) (((. .) .) ((. .) .)) ((. .) .))
        ((5 2) (((. .) (. .)) (. .)) (. (. .)))
        ((5 2) (((. .) (. .)) (. .)) ((. .) .))
        ((2 6) (. (. .)) ((. .) ((. .) (. (. .)))))
        ((2 6) (. (. .)) ((. .) ((. .) ((. .) .))))
        ((2 6) (. (. .)) ((. .) ((. (. .)) (. .))))
        ((2 6) (. (. .)) ((. .) (((. .) .) (. .))))
        ((2 6) (. (. .)) ((. (. .)) ((. .) (. .))))
        ((2 6) (. (. .)) (((. .) .) ((. .) (. .))))
        ((2 6) (. (. .)) (((. .) (. .)) (. (. .))))
        ((2 6) (. (. .)) (((. .) (. .)) ((. .) .)))
        ((2 6) (. (. .)) (((. .) (. (. .))) (. .)))
        ((2 6) (. (. .)) (((. .) ((. .) .)) (. .)))
        ((2 6) (. (. .)) (((. (. .)) (. .)) (. .)))
        ((2 6) (. (. .)) ((((. .) .) (. .)) (. .)))
        ((2 6) ((. .) .) ((. .) ((. .) (. (. .)))))
        ((2 6) ((. .) .) ((. .) ((. .) ((. .) .))))
        ((2 6) ((. .) .) ((. .) ((. (. .)) (. .))))
        ((2 6) ((. .) .) ((. .) (((. .) .) (. .))))
        ((2 6) ((. .) .) ((. (. .)) ((. .) (. .))))
        ((2 6) ((. .) .) (((. .) .) ((. .) (. .))))
        ((2 6) ((. .) .) (((. .) (. .)) (. (. .))))
        ((2 6) ((. .) .) (((. .) (. .)) ((. .) .)))
        ((2 6) ((. .) .) (((. .) (. (. .))) (. .)))
        ((2 6) ((. .) .) (((. .) ((. .) .)) (. .)))
        ((2 6) ((. .) .) (((. (. .)) (. .)) (. .)))
        ((2 6) ((. .) .) ((((. .) .) (. .)) (. .)))
        ((3 5) ((. .) (. .)) ((. .) ((. .) (. .))))
        ((3 5) ((. .) (. .)) ((. (. .)) (. (. .))))
        ((3 5) ((. .) (. .)) ((. (. .)) ((. .) .)))
        ((3 5) ((. .) (. .)) (((. .) .) (. (. .))))
        ((3 5) ((. .) (. .)) (((. .) .) ((. .) .)))
        ((3 5) ((. .) (. .)) (((. .) (. .)) (. .)))
        ((4 4) ((. .) (. (. .))) ((. .) (. (. .))))
        ((4 4) ((. .) (. (. .))) ((. .) ((. .) .)))
        ((4 4) ((. .) (. (. .))) ((. (. .)) (. .)))
        ((4 4) ((. .) (. (. .))) (((. .) .) (. .)))
        ((4 4) ((. .) ((. .) .)) ((. .) (. (. .))))
        ((4 4) ((. .) ((. .) .)) ((. .) ((. .) .)))
        ((4 4) ((. .) ((. .) .)) ((. (. .)) (. .)))
        ((4 4) ((. .) ((. .) .)) (((. .) .) (. .)))
        ((4 4) ((. (. .)) (. .)) ((. .) (. (. .))))
        ((4 4) ((. (. .)) (. .)) ((. .) ((. .) .)))
        ((4 4) ((. (. .)) (. .)) ((. (. .)) (. .)))
        ((4 4) ((. (. .)) (. .)) (((. .) .) (. .)))
        ((4 4) (((. .) .) (. .)) ((. .) (. (. .))))
        ((4 4) (((. .) .) (. .)) ((. .) ((. .) .)))
        ((4 4) (((. .) .) (. .)) ((. (. .)) (. .)))
        ((4 4) (((. .) .) (. .)) (((. .) .) (. .)))
        ((5 3) ((. .) ((. .) (. .))) ((. .) (. .)))
        ((5 3) ((. (. .)) (. (. .))) ((. .) (. .)))
        ((5 3) ((. (. .)) ((. .) .)) ((. .) (. .)))
        ((5 3) (((. .) .) (. (. .))) ((. .) (. .)))
        ((5 3) (((. .) .) ((. .) .)) ((. .) (. .)))
        ((5 3) (((. .) (. .)) (. .)) ((. .) (. .)))
        ((6 2) ((. .) ((. .) (. (. .)))) (. (. .)))
        ((6 2) ((. .) ((. .) (. (. .)))) ((. .) .))
        ((6 2) ((. .) ((. .) ((. .) .))) (. (. .)))
        ((6 2) ((. .) ((. .) ((. .) .))) ((. .) .))
        ((6 2) ((. .) ((. (. .)) (. .))) (. (. .)))
        ((6 2) ((. .) ((. (. .)) (. .))) ((. .) .))
        ((6 2) ((. .) (((. .) .) (. .))) (. (. .)))
        ((6 2) ((. .) (((. .) .) (. .))) ((. .) .))
        ((6 2) ((. (. .)) ((. .) (. .))) (. (. .)))
        ((6 2) ((. (. .)) ((. .) (. .))) ((. .) .))
        ((6 2) (((. .) .) ((. .) (. .))) (. (. .)))
        ((6 2) (((. .) .) ((. .) (. .))) ((. .) .))
        ((6 2) (((. .) (. .)) (. (. .))) (. (. .)))
        ((6 2) (((. .) (. .)) (. (. .))) ((. .) .))
        ((6 2) (((. .) (. .)) ((. .) .)) (. (. .)))
        ((6 2) (((. .) (. .)) ((. .) .)) ((. .) .))
        ((6 2) (((. .) (. (. .))) (. .)) (. (. .)))
        ((6 2) (((. .) (. (. .))) (. .)) ((. .) .))
        ((6 2) (((. .) ((. .) .)) (. .)) (. (. .)))
        ((6 2) (((. .) ((. .) .)) (. .)) ((. .) .))
        ((6 2) (((. (. .)) (. .)) (. .)) (. (. .)))
        ((6 2) (((. (. .)) (. .)) (. .)) ((. .) .))
        ((6 2) ((((. .) .) (. .)) (. .)) (. (. .)))
        ((6 2) ((((. .) .) (. .)) (. .)) ((. .) .))
        ((3 6) ((. .) (. .)) ((. .) ((. .) (. (. .)))))
        ((3 6) ((. .) (. .)) ((. .) ((. .) ((. .) .))))
        ((3 6) ((. .) (. .)) ((. .) ((. (. .)) (. .))))
        ((3 6) ((. .) (. .)) ((. .) (((. .) .) (. .))))
        ((3 6) ((. .) (. .)) ((. (. .)) ((. .) (. .))))
        ((3 6) ((. .) (. .)) (((. .) .) ((. .) (. .))))
        ((3 6) ((. .) (. .)) (((. .) (. .)) (. (. .))))
        ((3 6) ((. .) (. .)) (((. .) (. .)) ((. .) .)))
        ((3 6) ((. .) (. .)) (((. .) (. (. .))) (. .)))
        ((3 6) ((. .) (. .)) (((. .) ((. .) .)) (. .)))
        ((3 6) ((. .) (. .)) (((. (. .)) (. .)) (. .)))
        ((3 6) ((. .) (. .)) ((((. .) .) (. .)) (. .)))
        ((4 5) ((. .) (. (. .))) ((. .) ((. .) (. .))))
        ((4 5) ((. .) (. (. .))) ((. (. .)) (. (. .))))
        ((4 5) ((. .) (. (. .))) ((. (. .)) ((. .) .)))
        ((4 5) ((. .) (. (. .))) (((. .) .) (. (. .))))
        ((4 5) ((. .) (. (. .))) (((. .) .) ((. .) .)))
        ((4 5) ((. .) (. (. .))) (((. .) (. .)) (. .)))
        ((4 5) ((. .) ((. .) .)) ((. .) ((. .) (. .))))
        ((4 5) ((. .) ((. .) .)) ((. (. .)) (. (. .))))
        ((4 5) ((. .) ((. .) .)) ((. (. .)) ((. .) .)))
        ((4 5) ((. .) ((. .) .)) (((. .) .) (. (. .))))
        ((4 5) ((. .) ((. .) .)) (((. .) .) ((. .) .)))
        ((4 5) ((. .) ((. .) .)) (((. .) (. .)) (. .)))
        ((4 5) ((. (. .)) (. .)) ((. .) ((. .) (. .))))
        ((4 5) ((. (. .)) (. .)) ((. (. .)) (. (. .))))
        ((4 5) ((. (. .)) (. .)) ((. (. .)) ((. .) .)))
        ((4 5) ((. (. .)) (. .)) (((. .) .) (. (. .))))
        ((4 5) ((. (. .)) (. .)) (((. .) .) ((. .) .)))
        ((4 5) ((. (. .)) (. .)) (((. .) (. .)) (. .)))
        ((4 5) (((. .) .) (. .)) ((. .) ((. .) (. .))))
        ((4 5) (((. .) .) (. .)) ((. (. .)) (. (. .))))
        ((4 5) (((. .) .) (. .)) ((. (. .)) ((. .) .)))
        ((4 5) (((. .) .) (. .)) (((. .) .) (. (. .))))
        ((4 5) (((. .) .) (. .)) (((. .) .) ((. .) .)))
        ((4 5) (((. .) .) (. .)) (((. .) (. .)) (. .)))
        ((5 4) ((. .) ((. .) (. .))) ((. .) (. (. .))))
        ((5 4) ((. .) ((. .) (. .))) ((. .) ((. .) .)))
        ((5 4) ((. .) ((. .) (. .))) ((. (. .)) (. .)))
        ((5 4) ((. .) ((. .) (. .))) (((. .) .) (. .)))
        ((5 4) ((. (. .)) (. (. .))) ((. .) (. (. .))))
        ((5 4) ((. (. .)) (. (. .))) ((. .) ((. .) .)))
        ((5 4) ((. (. .)) (. (. .))) ((. (. .)) (. .)))
        ((5 4) ((. (. .)) (. (. .))) (((. .) .) (. .)))
        ((5 4) ((. (. .)) ((. .) .)) ((. .) (. (. .))))
        ((5 4) ((. (. .)) ((. .) .)) ((. .) ((. .) .)))
        ((5 4) ((. (. .)) ((. .) .)) ((. (. .)) (. .)))
        ((5 4) ((. (. .)) ((. .) .)) (((. .) .) (. .)))
        ((5 4) (((. .) .) (. (. .))) ((. .) (. (. .))))
        ((5 4) (((. .) .) (. (. .))) ((. .) ((. .) .)))
        ((5 4) (((. .) .) (. (. .))) ((. (. .)) (. .)))
        ((5 4) (((. .) .) (. (. .))) (((. .) .) (. .)))
        ((5 4) (((. .) .) ((. .) .)) ((. .) (. (. .))))
        ((5 4) (((. .) .) ((. .) .)) ((. .) ((. .) .)))
        ((5 4) (((. .) .) ((. .) .)) ((. (. .)) (. .)))
        ((5 4) (((. .) .) ((. .) .)) (((. .) .) (. .)))
        ((5 4) (((. .) (. .)) (. .)) ((. .) (. (. .))))
        ((5 4) (((. .) (. .)) (. .)) ((. .) ((. .) .)))
        ((5 4) (((. .) (. .)) (. .)) ((. (. .)) (. .)))
        ((5 4) (((. .) (. .)) (. .)) (((. .) .) (. .)))
        ((6 3) ((. .) ((. .) (. (. .)))) ((. .) (. .)))
        ((6 3) ((. .) ((. .) ((. .) .))) ((. .) (. .)))
        ((6 3) ((. .) ((. (. .)) (. .))) ((. .) (. .)))
        ((6 3) ((. .) (((. .) .) (. .))) ((. .) (. .)))
        ((6 3) ((. (. .)) ((. .) (. .))) ((. .) (. .)))
        ((6 3) (((. .) .) ((. .) (. .))) ((. .) (. .)))
        ((6 3) (((. .) (. .)) (. (. .))) ((. .) (. .)))
        ((6 3) (((. .) (. .)) ((. .) .)) ((. .) (. .)))
        ((6 3) (((. .) (. (. .))) (. .)) ((. .) (. .)))
        ((6 3) (((. .) ((. .) .)) (. .)) ((. .) (. .)))
        ((6 3) (((. (. .)) (. .)) (. .)) ((. .) (. .)))
        ((6 3) ((((. .) .) (. .)) (. .)) ((. .) (. .)))
        ((shown 220) (total 3_276_340))
        |}]
    ;;

    let create_if_almost_balanced = Tree.create_if_almost_balanced

    let%expect_test _ =
      test_all
        create_if_almost_balanced
        ~are_balanced_enough:are_almost_balanced
        ~have_been_shown:are_balanced;
      [%expect
        {|
        ((1 5) (. .) ((. .) ((. .) (. .))))
        ((1 5) (. .) ((. (. .)) (. (. .))))
        ((1 5) (. .) ((. (. .)) ((. .) .)))
        ((1 5) (. .) (((. .) .) (. (. .))))
        ((1 5) (. .) (((. .) .) ((. .) .)))
        ((5 1) ((. (. .)) (. (. .))) (. .))
        ((5 1) ((. (. .)) ((. .) .)) (. .))
        ((5 1) (((. .) .) (. (. .))) (. .))
        ((5 1) (((. .) .) ((. .) .)) (. .))
        ((5 1) (((. .) (. .)) (. .)) (. .))
        ((2 7) (. (. .)) ((. (. .)) ((. .) (. (. .)))))
        ((2 7) (. (. .)) ((. (. .)) ((. .) ((. .) .))))
        ((2 7) (. (. .)) ((. (. .)) ((. (. .)) (. .))))
        ((2 7) (. (. .)) ((. (. .)) (((. .) .) (. .))))
        ((2 7) (. (. .)) (((. .) .) ((. .) (. (. .)))))
        ((2 7) (. (. .)) (((. .) .) ((. .) ((. .) .))))
        ((2 7) (. (. .)) (((. .) .) ((. (. .)) (. .))))
        ((2 7) (. (. .)) (((. .) .) (((. .) .) (. .))))
        ((2 7) (. (. .)) (((. .) (. .)) ((. .) (. .))))
        ((2 7) ((. .) .) ((. (. .)) ((. .) (. (. .)))))
        ((2 7) ((. .) .) ((. (. .)) ((. .) ((. .) .))))
        ((2 7) ((. .) .) ((. (. .)) ((. (. .)) (. .))))
        ((2 7) ((. .) .) ((. (. .)) (((. .) .) (. .))))
        ((2 7) ((. .) .) (((. .) .) ((. .) (. (. .)))))
        ((2 7) ((. .) .) (((. .) .) ((. .) ((. .) .))))
        ((2 7) ((. .) .) (((. .) .) ((. (. .)) (. .))))
        ((2 7) ((. .) .) (((. .) .) (((. .) .) (. .))))
        ((2 7) ((. .) .) (((. .) (. .)) ((. .) (. .))))
        ((7 2) (((. .) (. .)) ((. .) (. .))) (. (. .)))
        ((7 2) (((. .) (. .)) ((. .) (. .))) ((. .) .))
        ((7 2) (((. .) (. (. .))) (. (. .))) (. (. .)))
        ((7 2) (((. .) (. (. .))) (. (. .))) ((. .) .))
        ((7 2) (((. .) (. (. .))) ((. .) .)) (. (. .)))
        ((7 2) (((. .) (. (. .))) ((. .) .)) ((. .) .))
        ((7 2) (((. .) ((. .) .)) (. (. .))) (. (. .)))
        ((7 2) (((. .) ((. .) .)) (. (. .))) ((. .) .))
        ((7 2) (((. .) ((. .) .)) ((. .) .)) (. (. .)))
        ((7 2) (((. .) ((. .) .)) ((. .) .)) ((. .) .))
        ((7 2) (((. (. .)) (. .)) (. (. .))) (. (. .)))
        ((7 2) (((. (. .)) (. .)) (. (. .))) ((. .) .))
        ((7 2) (((. (. .)) (. .)) ((. .) .)) (. (. .)))
        ((7 2) (((. (. .)) (. .)) ((. .) .)) ((. .) .))
        ((7 2) ((((. .) .) (. .)) (. (. .))) (. (. .)))
        ((7 2) ((((. .) .) (. .)) (. (. .))) ((. .) .))
        ((7 2) ((((. .) .) (. .)) ((. .) .)) (. (. .)))
        ((7 2) ((((. .) .) (. .)) ((. .) .)) ((. .) .))
        ((shown 46) (total 3_431_304))
        |}]
    ;;

    let create_even_if_completely_unbalanced = Tree.create_even_if_completely_unbalanced

    let%expect_test _ =
      test_all
        create_even_if_completely_unbalanced
        ~are_balanced_enough:(fun _ _ -> true)
        ~have_been_shown:are_almost_balanced;
      [%expect
        {|
        ((1 5) (. .) (((. .) (. .)) (. .)))
        ((5 1) ((. .) ((. .) (. .))) (. .))
        ((1 6) (. .) ((. .) ((. .) (. (. .)))))
        ((1 6) (. .) ((. .) ((. .) ((. .) .))))
        ((1 6) (. .) ((. .) ((. (. .)) (. .))))
        ((1 6) (. .) ((. .) (((. .) .) (. .))))
        ((1 6) (. .) ((. (. .)) ((. .) (. .))))
        ((1 6) (. .) (((. .) .) ((. .) (. .))))
        ((1 6) (. .) (((. .) (. .)) (. (. .))))
        ((1 6) (. .) (((. .) (. .)) ((. .) .)))
        ((1 6) (. .) (((. .) (. (. .))) (. .)))
        ((1 6) (. .) (((. .) ((. .) .)) (. .)))
        ((1 6) (. .) (((. (. .)) (. .)) (. .)))
        ((1 6) (. .) ((((. .) .) (. .)) (. .)))
        ((6 1) ((. .) ((. .) (. (. .)))) (. .))
        ((6 1) ((. .) ((. .) ((. .) .))) (. .))
        ((6 1) ((. .) ((. (. .)) (. .))) (. .))
        ((6 1) ((. .) (((. .) .) (. .))) (. .))
        ((6 1) ((. (. .)) ((. .) (. .))) (. .))
        ((6 1) (((. .) .) ((. .) (. .))) (. .))
        ((6 1) (((. .) (. .)) (. (. .))) (. .))
        ((6 1) (((. .) (. .)) ((. .) .)) (. .))
        ((6 1) (((. .) (. (. .))) (. .)) (. .))
        ((6 1) (((. .) ((. .) .)) (. .)) (. .))
        ((6 1) (((. (. .)) (. .)) (. .)) (. .))
        ((6 1) ((((. .) .) (. .)) (. .)) (. .))
        ((1 7) (. .) ((. (. .)) ((. .) (. (. .)))))
        ((1 7) (. .) ((. (. .)) ((. .) ((. .) .))))
        ((1 7) (. .) ((. (. .)) ((. (. .)) (. .))))
        ((1 7) (. .) ((. (. .)) (((. .) .) (. .))))
        ((1 7) (. .) (((. .) .) ((. .) (. (. .)))))
        ((1 7) (. .) (((. .) .) ((. .) ((. .) .))))
        ((1 7) (. .) (((. .) .) ((. (. .)) (. .))))
        ((1 7) (. .) (((. .) .) (((. .) .) (. .))))
        ((1 7) (. .) (((. .) (. .)) ((. .) (. .))))
        ((1 7) (. .) (((. .) (. (. .))) (. (. .))))
        ((1 7) (. .) (((. .) (. (. .))) ((. .) .)))
        ((1 7) (. .) (((. .) ((. .) .)) (. (. .))))
        ((1 7) (. .) (((. .) ((. .) .)) ((. .) .)))
        ((1 7) (. .) (((. (. .)) (. .)) (. (. .))))
        ((1 7) (. .) (((. (. .)) (. .)) ((. .) .)))
        ((1 7) (. .) ((((. .) .) (. .)) (. (. .))))
        ((1 7) (. .) ((((. .) .) (. .)) ((. .) .)))
        ((7 1) ((. (. .)) ((. .) (. (. .)))) (. .))
        ((7 1) ((. (. .)) ((. .) ((. .) .))) (. .))
        ((7 1) ((. (. .)) ((. (. .)) (. .))) (. .))
        ((7 1) ((. (. .)) (((. .) .) (. .))) (. .))
        ((7 1) (((. .) .) ((. .) (. (. .)))) (. .))
        ((7 1) (((. .) .) ((. .) ((. .) .))) (. .))
        ((7 1) (((. .) .) ((. (. .)) (. .))) (. .))
        ((7 1) (((. .) .) (((. .) .) (. .))) (. .))
        ((7 1) (((. .) (. .)) ((. .) (. .))) (. .))
        ((7 1) (((. .) (. (. .))) (. (. .))) (. .))
        ((7 1) (((. .) (. (. .))) ((. .) .)) (. .))
        ((7 1) (((. .) ((. .) .)) (. (. .))) (. .))
        ((7 1) (((. .) ((. .) .)) ((. .) .)) (. .))
        ((7 1) (((. (. .)) (. .)) (. (. .))) (. .))
        ((7 1) (((. (. .)) (. .)) ((. .) .)) (. .))
        ((7 1) ((((. .) .) (. .)) (. (. .))) (. .))
        ((7 1) ((((. .) .) (. .)) ((. .) .)) (. .))
        ((1 8) (. .) ((. (. .)) ((. .) ((. .) (. .)))))
        ((1 8) (. .) ((. (. .)) ((. (. .)) (. (. .)))))
        ((1 8) (. .) ((. (. .)) ((. (. .)) ((. .) .))))
        ((1 8) (. .) ((. (. .)) (((. .) .) (. (. .)))))
        ((1 8) (. .) ((. (. .)) (((. .) .) ((. .) .))))
        ((1 8) (. .) ((. (. .)) (((. .) (. .)) (. .))))
        ((1 8) (. .) (((. .) .) ((. .) ((. .) (. .)))))
        ((1 8) (. .) (((. .) .) ((. (. .)) (. (. .)))))
        ((1 8) (. .) (((. .) .) ((. (. .)) ((. .) .))))
        ((1 8) (. .) (((. .) .) (((. .) .) (. (. .)))))
        ((1 8) (. .) (((. .) .) (((. .) .) ((. .) .))))
        ((1 8) (. .) (((. .) .) (((. .) (. .)) (. .))))
        ((1 8) (. .) (((. .) (. .)) ((. .) (. (. .)))))
        ((1 8) (. .) (((. .) (. .)) ((. .) ((. .) .))))
        ((1 8) (. .) (((. .) (. .)) ((. (. .)) (. .))))
        ((1 8) (. .) (((. .) (. .)) (((. .) .) (. .))))
        ((1 8) (. .) (((. .) (. (. .))) ((. .) (. .))))
        ((1 8) (. .) (((. .) ((. .) .)) ((. .) (. .))))
        ((1 8) (. .) (((. (. .)) (. .)) ((. .) (. .))))
        ((1 8) (. .) ((((. .) .) (. .)) ((. .) (. .))))
        ((1 8) (. .) (((. .) ((. .) (. .))) (. (. .))))
        ((1 8) (. .) (((. .) ((. .) (. .))) ((. .) .)))
        ((1 8) (. .) (((. (. .)) (. (. .))) (. (. .))))
        ((1 8) (. .) (((. (. .)) (. (. .))) ((. .) .)))
        ((1 8) (. .) (((. (. .)) ((. .) .)) (. (. .))))
        ((1 8) (. .) (((. (. .)) ((. .) .)) ((. .) .)))
        ((1 8) (. .) ((((. .) .) (. (. .))) (. (. .))))
        ((1 8) (. .) ((((. .) .) (. (. .))) ((. .) .)))
        ((1 8) (. .) ((((. .) .) ((. .) .)) (. (. .))))
        ((1 8) (. .) ((((. .) .) ((. .) .)) ((. .) .)))
        ((1 8) (. .) ((((. .) (. .)) (. .)) (. (. .))))
        ((1 8) (. .) ((((. .) (. .)) (. .)) ((. .) .)))
        ((2 7) (. (. .)) (((. .) (. (. .))) (. (. .))))
        ((2 7) (. (. .)) (((. .) (. (. .))) ((. .) .)))
        ((2 7) (. (. .)) (((. .) ((. .) .)) (. (. .))))
        ((2 7) (. (. .)) (((. .) ((. .) .)) ((. .) .)))
        ((2 7) (. (. .)) (((. (. .)) (. .)) (. (. .))))
        ((2 7) (. (. .)) (((. (. .)) (. .)) ((. .) .)))
        ((2 7) (. (. .)) ((((. .) .) (. .)) (. (. .))))
        ((2 7) (. (. .)) ((((. .) .) (. .)) ((. .) .)))
        ((2 7) ((. .) .) (((. .) (. (. .))) (. (. .))))
        ((2 7) ((. .) .) (((. .) (. (. .))) ((. .) .)))
        ((2 7) ((. .) .) (((. .) ((. .) .)) (. (. .))))
        ((2 7) ((. .) .) (((. .) ((. .) .)) ((. .) .)))
        ((2 7) ((. .) .) (((. (. .)) (. .)) (. (. .))))
        ((2 7) ((. .) .) (((. (. .)) (. .)) ((. .) .)))
        ((2 7) ((. .) .) ((((. .) .) (. .)) (. (. .))))
        ((2 7) ((. .) .) ((((. .) .) (. .)) ((. .) .)))
        ((7 2) ((. (. .)) ((. .) (. (. .)))) (. (. .)))
        ((7 2) ((. (. .)) ((. .) (. (. .)))) ((. .) .))
        ((7 2) ((. (. .)) ((. .) ((. .) .))) (. (. .)))
        ((7 2) ((. (. .)) ((. .) ((. .) .))) ((. .) .))
        ((7 2) ((. (. .)) ((. (. .)) (. .))) (. (. .)))
        ((7 2) ((. (. .)) ((. (. .)) (. .))) ((. .) .))
        ((7 2) ((. (. .)) (((. .) .) (. .))) (. (. .)))
        ((7 2) ((. (. .)) (((. .) .) (. .))) ((. .) .))
        ((7 2) (((. .) .) ((. .) (. (. .)))) (. (. .)))
        ((7 2) (((. .) .) ((. .) (. (. .)))) ((. .) .))
        ((7 2) (((. .) .) ((. .) ((. .) .))) (. (. .)))
        ((7 2) (((. .) .) ((. .) ((. .) .))) ((. .) .))
        ((7 2) (((. .) .) ((. (. .)) (. .))) (. (. .)))
        ((7 2) (((. .) .) ((. (. .)) (. .))) ((. .) .))
        ((7 2) (((. .) .) (((. .) .) (. .))) (. (. .)))
        ((7 2) (((. .) .) (((. .) .) (. .))) ((. .) .))
        ((8 1) ((. (. .)) ((. .) ((. .) (. .)))) (. .))
        ((8 1) ((. (. .)) ((. (. .)) (. (. .)))) (. .))
        ((8 1) ((. (. .)) ((. (. .)) ((. .) .))) (. .))
        ((8 1) ((. (. .)) (((. .) .) (. (. .)))) (. .))
        ((8 1) ((. (. .)) (((. .) .) ((. .) .))) (. .))
        ((8 1) ((. (. .)) (((. .) (. .)) (. .))) (. .))
        ((8 1) (((. .) .) ((. .) ((. .) (. .)))) (. .))
        ((8 1) (((. .) .) ((. (. .)) (. (. .)))) (. .))
        ((8 1) (((. .) .) ((. (. .)) ((. .) .))) (. .))
        ((8 1) (((. .) .) (((. .) .) (. (. .)))) (. .))
        ((8 1) (((. .) .) (((. .) .) ((. .) .))) (. .))
        ((8 1) (((. .) .) (((. .) (. .)) (. .))) (. .))
        ((8 1) (((. .) (. .)) ((. .) (. (. .)))) (. .))
        ((8 1) (((. .) (. .)) ((. .) ((. .) .))) (. .))
        ((8 1) (((. .) (. .)) ((. (. .)) (. .))) (. .))
        ((8 1) (((. .) (. .)) (((. .) .) (. .))) (. .))
        ((8 1) (((. .) (. (. .))) ((. .) (. .))) (. .))
        ((8 1) (((. .) ((. .) .)) ((. .) (. .))) (. .))
        ((8 1) (((. (. .)) (. .)) ((. .) (. .))) (. .))
        ((8 1) ((((. .) .) (. .)) ((. .) (. .))) (. .))
        ((8 1) (((. .) ((. .) (. .))) (. (. .))) (. .))
        ((8 1) (((. .) ((. .) (. .))) ((. .) .)) (. .))
        ((8 1) (((. (. .)) (. (. .))) (. (. .))) (. .))
        ((8 1) (((. (. .)) (. (. .))) ((. .) .)) (. .))
        ((8 1) (((. (. .)) ((. .) .)) (. (. .))) (. .))
        ((8 1) (((. (. .)) ((. .) .)) ((. .) .)) (. .))
        ((8 1) ((((. .) .) (. (. .))) (. (. .))) (. .))
        ((8 1) ((((. .) .) (. (. .))) ((. .) .)) (. .))
        ((8 1) ((((. .) .) ((. .) .)) (. (. .))) (. .))
        ((8 1) ((((. .) .) ((. .) .)) ((. .) .)) (. .))
        ((8 1) ((((. .) (. .)) (. .)) (. (. .))) (. .))
        ((8 1) ((((. .) (. .)) (. .)) ((. .) .)) (. .))
        ((shown 156) (total 13_501_812))
        |}]
    ;;
  end
  in
  ()
;;

let () =
  test
    (module struct
      type t = (unit, Comparator.Poly.comparator_witness) Set.Tree.t

      let balance_invariants = Set.Tree.Expert.balance_invariants
      let are_balanced = Set.Tree.Expert.are_balanced
      let are_almost_balanced = Set.Tree.Expert.need_rebalance_at_most_once
      let empty = Set.Tree.Expert.empty

      let expose t =
        match (t : t) with
        | Empty -> None
        | Leaf { elt = () } -> Some (empty, empty)
        | Node { left; elt = (); right; weight = _ } -> Some (left, right)
      ;;

      let create_if_balanced l r =
        Set.Tree.Expert.create_assuming_balanced_unchecked l () r
      ;;

      let create_if_almost_balanced l r =
        Set.Tree.Expert.create_and_rebalance_at_most_once_unchecked l () r
      ;;

      let create_even_if_completely_unbalanced l r =
        Set.Tree.Expert.create_and_rebalance_unchecked l () r
      ;;
    end)
[@@alert "-set_private"]
;;

let () =
  test
    (module struct
      type t = (unit, unit, Comparator.Poly.comparator_witness) Map.Tree.t

      let balance_invariants = Map.Tree.Expert.balance_invariants
      let are_balanced = Map.Tree.Expert.are_balanced
      let are_almost_balanced = Map.Tree.Expert.need_rebalance_at_most_once
      let empty = Map.Tree.Expert.empty

      let expose t =
        match (t : t) with
        | Empty -> None
        | Leaf { key = (); data = () } -> Some (empty, empty)
        | Node { left; key = (); data = (); right; weight = _ } -> Some (left, right)
      ;;

      let create_if_balanced l r =
        Map.Tree.Expert.create_assuming_balanced_unchecked l () () r
      ;;

      let create_if_almost_balanced l r =
        Map.Tree.Expert.create_and_rebalance_at_most_once_unchecked l () () r
      ;;

      let create_even_if_completely_unbalanced l r =
        Map.Tree.Expert.create_and_rebalance_unchecked l () () r
      ;;
    end)
[@@alert "-map_private"]
;;
